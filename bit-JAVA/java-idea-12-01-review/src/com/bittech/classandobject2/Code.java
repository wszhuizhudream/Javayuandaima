package com.bittech.classandobject2;

/**面向对象编程下——代码块
 * Author:WSChase
 * Created:2018/12/1
 */
public class Code {
    //代码块分类：（1）非静态块：普通代码块、构造块
    //           （2）静态块
    //下面分别对这三种代码块进行详解
    //（1）普通代码块：这种代码块是在方法中的，主要是在方法中重复定义一个变量
    public static void commonCode(){
        //普通代码块：在普通代码块中重复定义某个变量时，这个普通代码块一定要放在重复定义的前面，否则就是无效的
        {
            int x=20;
            System.out.println("x="+x);
        }
        int x=10;
        System.out.println("x="+x);
    }

    //(2)构造块：构造块也是非静态代码块，但是它和普通代码块最大的区别在于，构造快是定义在类中的，而我们的普通代码块是定义在方法中的
    {
        System.out.println("这是构造块");
    }
    public Code(){
        System.out.println("这是构造方法");
    }
    //从我们的运行结果可以看出，构造块是先于我们的构造方法执行的，并且构造块是在创建对象的时候才会执行的，
    // 创建几个对象就会对应的执行几次构造块。

//（3）静态块：前面两种都是属于非静态块，现在我们需要学习的是静态块-》用static关键字进行修饰放在类中的代码块
    static{
    System.out.println("这是Code类的静态块");
}
//从我们的运行结果可以看出来，我们的静态块只执行一次，不管你创建多少对象它都只执行一次，并且是最先执行的。
//最需要注意的地方是：静态块就算不创建对象也会执行的，也就是说它的执行机制和非静态块是不同的。它是在JVM
//寻找字节码文件时候就已经将静态块加载到了我们的JVM中，所以只要是这个静态块在含有main方法的类中，那么这个
//字节码文件就会被加载，在这之前我们的静态块就会被加载；如果这个静态块没有在main方法的这个类中，并且我们
//的代码执行和含有静态块的这个类没有关系，那么这个静态块就不会被加载，这个时候这个静态块无论怎么都不会执行。
//下面我们将用代码验证结论：（见下）
    public static void main(String[] args) {
//    Code c1=new Code();
//    Code c2=new Code();
//    c1.commonCode();
        }
    }

class Person{
    static{
        System.out.println("这是Person的静态块");//不会被加载到JVM中
    }
}